version: "3.6"
services:
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: always
    command: -H unix:///var/run/docker.sock
    networks:
      - default
      - traefik_proxy
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${USERDIR}/docker/portainer/data:/data
      - ${USERDIR}/docker/shared:/shared
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer-router.rule=Host(`portainer.${DOMAINNAME}`)"
      - "traefik.http.routers.portainer-router.tls=true"
      - "traefik.http.routers.portainer-router.tls.certresolver=letsencrypt"
      - "traefik.http.routers.portainer-router.middlewares=secured-no-basic@file"
      - "traefik.http.services.portainer-router.loadbalancer.server.port=9000"
  homeassistant:
    image: homeassistant/home-assistant
    container_name: homeassistant
    restart: unless-stopped
    volumes:
      - ${USERDIR}/docker/homeassistant:/config
      - /etc/localtime:/etc/localtime:ro
      - ${USERDIR}/docker/shared:/shared
      - ${USERDIR}/docker/nodered/data/etc/camera-images:/config/www/camera-images
    network_mode: host
    privileged: true
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    labels:
      - "traefik.enable=false"
  mosquitto:
    image: eclipse-mosquitto
    container_name: mqtt
    restart: unless-stopped
    user: 1883:1883
    volumes:
      - ${USERDIR}/docker/mosquitto/config:/mosquitto/config
      - ${USERDIR}/docker/mosquitto/data/mosquitto-data:/mosquitto/data
      - ${USERDIR}/docker/mosquitto/data/mosquitto-log:/mosquitto/log
      - /etc/localtime:/etc/localtime:ro
    networks:
      - default
      - traefik_proxy
    ports:
      - "1883:1883"
      - "9001:9001"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
  unifi:
    image: jacobalberty/unifi:stable-6
    container_name: unifi
    restart: always
    network_mode: host
    volumes:
      - ${USERDIR}/docker/unifi/data:/unifi/data
      - ${USERDIR}/docker/unifi/log:/unifi/log
      - ${USERDIR}/docker/unifi/data/run:/var/run/unifi
      - ${USERDIR}/docker/traefik_cert_extractor/certs/${DOMAINNAME}/:/unifi/cert
      - ${USERDIR}/docker/traefik_cert_extractor/certs/${DOMAINNAME}/chain.pem:/unifi/cert/cert.pem
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    labels:
      - "traefik.enable=false"
  pihole:
    image: pihole/pihole
    container_name: pihole
    restart: unless-stopped
    ports:
      - "192.168.1.40:53:53/tcp"
      - "192.168.1.40:53:53/udp"
      - "192.168.1.40:67:67/udp"
      - "192.168.1.40:8181:80/tcp"
      - "192.168.1.40:8444:443/tcp"
    environment:
      - TZ=${TZ}
    volumes:
       - ${USERDIR}/docker/pihole/etc:/etc/pihole/
       - ${USERDIR}/docker/pihole/dnsmasq:/etc/dnsmasq.d/
    dns:
      - 127.0.0.1
      - 1.1.1.1
    cap_add:
      - NET_ADMIN
    networks:
      - default
      - traefik_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_proxy"
      - "traefik.http.routers.pihole-router.rule=Host(`pihole.${DOMAINNAME}`)"
      - "traefik.http.routers.pihole-router.tls=true"
      - "traefik.http.routers.pihole-router.tls.certresolver=letsencrypt"
      - "traefik.http.routers.pihole-router.middlewares=secured@file"
      - "traefik.http.services.pihole-router.loadbalancer.server.port=80"
      - "traefik.http.middlewares.pihole-specialheaders.headers.sslHost=pihole.${DOMAINNAME}"
  nodered:
    image: nodered/node-red
    container_name: nodered
    restart: unless-stopped
    depends_on:
      - mosquitto
      - homeassistant
    networks:
      - traefik_proxy
    ports:
      - "1880:1880"
    volumes:
      - ${USERDIR}/docker/nodered/data/etc:/data
    environment:
      - user=${PUID}
      - TZ=${TZ}
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_proxy"
      - "traefik.http.routers.nodered-router.rule=Host(`nodered.${DOMAINNAME}`)"
      - "traefik.http.routers.nodered-router.tls=true"
      - "traefik.http.routers.nodered-router.tls.certresolver=letsencrypt"
      - "traefik.http.routers.nodered-router.middlewares=secured@file"
      - "traefik.http.services.nodered-router.loadbalancer.server.port=1880"
  traefik:
    image: traefik
    container_name: traefik
    restart: always
    hostname: traefik
    domainname: ${DOMAINNAME}
    networks:
      - default
      - traefik_proxy
    ports:
      - "80:80"
      - "443:443"
      - "8282:8080"
    environment:
      - CF_API_EMAIL=${CF_EMAIL}
      - CF_DNS_API_TOKEN=${CF_API_TOKEN}
      - DOMAINNAME=${DOMAINNAME}
      - TRAEFIK_PROVIDERS_DOCKER_DEFAULTRULE="Host(`{{ trimPrefix `/` .Name }}.${DOMAINNAME}`)"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_proxy"
      - "traefik.http.routers.traefik-router.rule=Host(`traefik.${DOMAINNAME}`)"
      - "traefik.http.routers.traefik-router.middlewares=secured@file"
      - "traefik.http.routers.traefik-router.tls=true"
      - "traefik.http.routers.traefik-router.tls.certresolver=letsencrypt"
      - "traefik.http.services.traefik-router.loadbalancer.server.port=8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${USERDIR}/docker/traefik:/etc/traefik:rw
      - ${USERDIR}/docker/traefik/configs:/etc/traefik/configs:ro
      - ${USERDIR}/docker/shared:/shared
  watchtower:
    image: v2tec/watchtower
    container_name: watchtower
    restart: always
    hostname: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --schedule "0 0 4 * * *" --cleanup
  traefik_cert_extractor:

    image: ldez/traefik-certs-dumper:latest
    container_name: traefik_cert_extractor
    restart: always
    command: file --watch --source /traefik/acme.json --version v2 --domain-subdir --crt-name=chain --crt-ext=.pem --key-name=privkey --key-ext=.pem --dest /output
    volumes:
      - ${USERDIR}/docker/traefik/acme:/traefik:ro
      - ${USERDIR}/docker/traefik_cert_extractor/certs:/output:rw
  mariadb:
    image: mariadb
    container_name: mariadb
    restart: always
    hostname: db
    networks:
      - default
      - traefik_proxy
    ports:
      - 3306:3306
    environment:
      - MYSQL_ROOT_PASSWORD=${DBPASS}
    labels:
      - "traefik.enable=false"
    volumes:
      - ${USERDIR}/docker/mariadb:/var/lib/mysql
  adminer:
    image: adminer
    container_name: adminer    
    restart: always
    hostname: adminer
    networks:
      - default
      - traefik_proxy
    ports:
      - 8383:8080
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_proxy"
      - "traefik.http.routers.adminer-router.rule=Host(`adminer.${DOMAINNAME}`)"
      - "traefik.http.routers.adminer-router.tls=true"
      - "traefik.http.routers.adminer-router.tls.certresolver=letsencrypt"
      - "traefik.http.routers.adminer-router.middlewares=secured@file"
      - "traefik.http.services.adminer-service.loadbalancer.server.port=8080"
      - "traefik.http.services.adminer-service.loadbalancer.server.scheme=http"
      - "traefik.http.services.adminer-service.loadbalancer.passHostHeader=true"
  rtl433:
    container_name: rtl433
    image: hertzg/rtl_433:latest
    devices:
      - "/dev/bus/usb/001/009"
    command:
      - '-Mtime:unix:usec:utc'
      - '-Fmqtt://mqtt:1883,retain=1'
    depends_on:
      - mosquitto
      - homeassistant
    entrypoint: ["/bin/sh", "-c" , "sleep 10 && /usr/local/bin/rtl_433"]
  zwavejs2mqtt:
    container_name: zwavejs2mqtt
    image: zwavejs/zwavejs2mqtt
    restart: always
    tty: true
    stop_signal: SIGINT
    networks:
      - default
    ports:
      - 8091:8091
      - 3001:3001
    devices:
      - "/dev/serial/by-id/usb-0658_0200-if00:/dev/ttyACM1:rmw"
    volumes:
      - ${USERDIR}/docker/zwavejs2mqtt:/usr/src/app/store
    environment:
      - MQTT_HOST=mqtt
  ettgram:
    image: nginx
    container_name: ettgram    
    restart: always
    hostname: ettgram
    networks:
      - default
      - traefik_proxy
    ports:
      - 8484:80
    volumes: 
      - ${USERDIR}/docker/nginx:/usr/share/nginx/html
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_proxy"
      - "traefik.http.routers.nginx-router.rule=Host(`ett-the-gram.${DOMAINNAME}`)"
      - "traefik.http.routers.nginx-router.tls=true"
      - "traefik.http.routers.nginx-router.tls.certresolver=letsencrypt"
      - "traefik.http.routers.nginx-router.middlewares=secured-no-basic@file"
      - "traefik.http.services.nginx-service.loadbalancer.server.port=80"
      - "traefik.http.services.nginx-service.loadbalancer.server.scheme=http"
      - "traefik.http.services.nginx-service.loadbalancer.passHostHeader=true"
  switchbot-mqtt:
    image: fphammerle/switchbot-mqtt:latest
    container_name: switchbot-mqtt
    network_mode: host
    userns_mode: host
    environment:
    - MQTT_HOST=192.168.1.40
    - MQTT_PORT=1883
    restart: unless-stopped
  vscode:
    container_name: vscode
    image: codercom/code-server
    volumes:
      - ${USERDIR}/docker:/home/coder/project

      - ${USERDIR}/vscode:/home/coder/.local/share/code-server
    ports:
      - "8445:8443"
    command: code-server --auth password --port 8443 --disable-telemetry /home/coder/project
    environment:
      PASSWORD: "${DBPASS}"
    networks:
      - default
    restart: unless-stopped
  plex:
      image: lscr.io/linuxserver/plex
      container_name: plex
      network_mode: host
      environment:
        - PUID=${PUID}
        - PGID=${PGID}
        - VERSION=docker
        - PLEX_CLAIM= #optional
      volumes:
        - ${USERDIR}/docker/plex/library:/config
        - ${USERDIR}/docker/plex/tvseries:/tv
        - ${USERDIR}/docker/plex/movies:/movies
      restart: unless-stopped
  frigate:
    container_name: frigate
    privileged: true # this may not be necessary for all setups
    restart: unless-stopped
    image: ghcr.io/blakeblackshear/frigate:0.12.0-beta8
    shm_size: "160mb" # update for your cameras based on calculation above (width * height * 1.5 * 9 + 270480)/1048576
    devices:
      - /dev/dri/renderD128 # for intel hwaccel, needs to be updated for your hardware
      - /dev/bus/usb:/dev/bus/usb # passes the USB Coral, needs to be modified for other versions
    networks:
      - default
      - traefik_proxy
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${USERDIR}/docker/frigate/config.yml:/config/config.yml:ro
      - /media/sd-card/frigate:/media/frigate
      - type: tmpfs # Optional: 1GB of memory, reduces SSD/SD Card wear
        target: /tmp/cache
        tmpfs:
          size: 1000000000
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_proxy"
      - "traefik.http.routers.nvr-router.rule=Host(`nvr.${DOMAINNAME}`)"
      - "traefik.http.routers.nvr-router.tls=true"
      - "traefik.http.routers.nvr-router.tls.certresolver=letsencrypt"
      - "traefik.http.routers.nvr-router.middlewares=secured@file"
      - "traefik.http.services.nvr-service.loadbalancer.server.port=5000"
      - "traefik.http.services.nvr-service.loadbalancer.server.scheme=http"
      - "traefik.http.services.nvr-service.loadbalancer.passHostHeader=true"
    ports:
      - "5000:5000"
      - "1935:1935" # RTMP feeds
    environment:
      FRIGATE_RTSP_PASSWORD: ${CAMERA_PASSWORD}
      LIBVA_DRIVER_NAME: i965
  zigbee2mqtt:
    container_name: zigbee2mqtt
    image: koenkk/zigbee2mqtt
    volumes:
       - ${USERDIR}/docker/zigbee2mqtt/data:/app/data
       - ${USERDIR}/docker/zigbee2mqtt/run/udev:/run/udev:ro
    devices:
       - "/dev/serial/by-id/usb-ITead_Sonoff_Zigbee_3.0_USB_Dongle_Plus_6ed8f84eb429ec118d48bf9c40c9ce8d-if00-port0:/dev/ttyACM0"
    restart: always
    privileged: true
    environment:
      - TZ=${TZ}
    ports:
      - "8585:8080"
  #sonarqube:
  #  container_name: sonarqube
  #  image: sonarqube:8.4.1-community
  #  restart: "no"
  #  ports:
  #    - 9002:9000
networks:
  traefik_proxy:
    external:
      name: traefik_proxy
  default:
    driver: bridge
