version: "3.6"
services:
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: always
    command: -H unix:///var/run/docker.sock
    networks:
      - default
      - traefik_proxy
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${USERDIR}/docker/portainer/data:/data
      - ${USERDIR}/docker/shared:/shared
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer-router.rule=Host(`portainer.${DOMAINNAME}`)"
      - "traefik.http.routers.portainer-router.tls=true"
      - "traefik.http.routers.portainer-router.tls.certresolver=letsencrypt"
      - "traefik.http.routers.portainer-router.middlewares=secured-no-basic@file"
      - "traefik.http.services.portainer-router.loadbalancer.server.port=9000"
  homeassistant:
    image: homeassistant/home-assistant
    container_name: homeassistant
    restart: unless-stopped
    volumes:
      - ${USERDIR}/docker/homeassistant:/config
      - /etc/localtime:/etc/localtime:ro
      - ${USERDIR}/docker/shared:/shared
      - ${USERDIR}/docker/nodered/data/etc/camera-images:/config/www/camera-images
    network_mode: host
    # ports:
    #   - "8123:8123"
    #   - "56700:56700/udp"
    privileged: true
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    labels:
      - "traefik.enable=false"
  mosquitto:
    image: eclipse-mosquitto:1.6.13
    container_name: mqtt
    restart: unless-stopped
    user: 1883:1883
    volumes:
      - ${USERDIR}/docker/mosquitto/config:/mosquitto/config
      - ${USERDIR}/docker/mosquitto/data/mosquitto-data:/mosquitto/data
      - ${USERDIR}/docker/mosquitto/data/mosquitto-log:/mosquitto/log
      - /etc/localtime:/etc/localtime:ro
    networks:
      - default
      - traefik_proxy
    ports:
      - "1883:1883"
      - "9001:9001"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
  unifi:
    image: jacobalberty/unifi:6.2.23
    container_name: unifi
    restart: always
    network_mode: host
    # networks:
    #   - traefik_proxy
    volumes:
      - ${USERDIR}/docker/unifi/data/lib:/var/lib/unifi
      - ${USERDIR}/docker/unifi/data/log:/var/log/unifi
      - ${USERDIR}/docker/unifi/data/run:/var/run/unifi
      - ${USERDIR}/docker/traefik_cert_extractor/certs/${DOMAINNAME}/:/unifi/cert
      - ${USERDIR}/docker/traefik_cert_extractor/certs/${DOMAINNAME}/chain.pem:/unifi/cert/cert.pem
    # ports:
    #   - "3478:3478/udp"
    #   - "10001:10001/udp"
    #   - "6789:6789/tcp"
    #   - "8080:8080/tcp"
    #   - "8081:8081/tcp"
    #   - "8880:8880/tcp"
    #   - "8443:8443/tcp"
    #   - "8843:8843/tcp"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    labels:
      - "traefik.enable=false"
  pihole:
    image: pihole/pihole
    container_name: pihole
    restart: unless-stopped
    ports:
      - "192.168.1.40:53:53/tcp"
      - "192.168.1.40:53:53/udp"
      - "192.168.1.40:67:67/udp"
      - "192.168.1.40:8181:80/tcp"
      - "192.168.1.40:8444:443/tcp"
    environment:
      - TZ=${TZ}
    volumes:
       - ${USERDIR}/docker/pihole/etc:/etc/pihole/
       - ${USERDIR}/docker/pihole/dnsmasq:/etc/dnsmasq.d/
    dns:
      - 127.0.0.1
      - 1.1.1.1
    cap_add:
      - NET_ADMIN
    networks:
      - default
      - traefik_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_proxy"
      - "traefik.http.routers.pihole-router.rule=Host(`pihole.${DOMAINNAME}`)"
      - "traefik.http.routers.pihole-router.tls=true"
      - "traefik.http.routers.pihole-router.tls.certresolver=letsencrypt"
      - "traefik.http.routers.pihole-router.middlewares=secured@file"
      - "traefik.http.services.pihole-router.loadbalancer.server.port=80"
      - "traefik.http.middlewares.pihole-specialheaders.headers.sslHost=pihole.${DOMAINNAME}"
  nodered:
    image: nodered/node-red-docker:v8
    container_name: nodered
    restart: unless-stopped
    depends_on:
      - mosquitto
      - homeassistant
    # network_mode: host
    networks:
      - traefik_proxy
    ports:
      - "1880:1880"
    volumes:
      - ${USERDIR}/docker/nodered/data/etc:/data
    environment:
      - user=${PUID}
      - TZ=${TZ}
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_proxy"
      - "traefik.http.routers.nodered-router.rule=Host(`nodered.${DOMAINNAME}`)"
      - "traefik.http.routers.nodered-router.tls=true"
      - "traefik.http.routers.nodered-router.tls.certresolver=letsencrypt"
      - "traefik.http.routers.nodered-router.middlewares=secured@file"
      - "traefik.http.services.nodered-router.loadbalancer.server.port=1880"
  traefik:
    image: traefik
    container_name: traefik
    restart: always
    hostname: traefik
    domainname: ${DOMAINNAME}
    networks:
      - default
      - traefik_proxy
    ports:
      - "80:80"
      - "443:443"
      - "8282:8080"
    environment:
      - DUCKDNS_TOKEN=${DUCKDNS_TOKEN}
      - DOMAINNAME=${DOMAINNAME}
      - TRAEFIK_PROVIDERS_DOCKER_DEFAULTRULE="Host(`{{ trimPrefix `/` .Name }}.${DOMAINNAME}`)"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_proxy"
      - "traefik.http.routers.traefik-router.rule=Host(`traefik.${DOMAINNAME}`)"
      - "traefik.http.routers.traefik-router.middlewares=secured@file"
      - "traefik.http.routers.traefik-router.tls=true"
      - "traefik.http.routers.traefik-router.tls.certresolver=letsencrypt"
      - "traefik.http.services.traefik-router.loadbalancer.server.port=8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${USERDIR}/docker/traefik:/etc/traefik:rw
      - ${USERDIR}/docker/traefik/configs:/etc/traefik/configs:ro
      - ${USERDIR}/docker/shared:/shared
  watchtower:
    image: v2tec/watchtower
    container_name: watchtower
    restart: always
    hostname: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --schedule "0 0 4 * * *" --cleanup
  traefik_cert_extractor:

    image: ldez/traefik-certs-dumper:latest
    container_name: traefik_cert_extractor
    restart: always
    command: file --watch --source /traefik/acme.json --version v2 --domain-subdir --crt-name=chain --crt-ext=.pem --key-name=privkey --key-ext=.pem --dest /output
    volumes:
      - ${USERDIR}/docker/traefik/acme:/traefik:ro
      - ${USERDIR}/docker/traefik_cert_extractor/certs:/output:rw
  mariadb:
    image: mariadb
    container_name: mariadb
    restart: always
    hostname: db
    networks:
      - default
      - traefik_proxy
    ports:
      - 3306:3306
    environment:
      - MYSQL_ROOT_PASSWORD=${DBPASS}
    labels:
      - "traefik.enable=false"
  adminer:
    image: adminer
    container_name: adminer    
    restart: always
    hostname: adminer
    networks:
      - default
      - traefik_proxy
    ports:
      - 8383:8080
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_proxy"
      - "traefik.http.routers.adminer-router.rule=Host(`adminer.${DOMAINNAME}`)"
      - "traefik.http.routers.adminer-router.tls=true"
      - "traefik.http.routers.adminer-router.tls.certresolver=letsencrypt"
      - "traefik.http.routers.adminer-router.middlewares=secured@file"
      - "traefik.http.services.adminer-service.loadbalancer.server.port=8080"
      - "traefik.http.services.adminer-service.loadbalancer.server.scheme=http"
      - "traefik.http.services.adminer-service.loadbalancer.passHostHeader=true"
  rtl2hass:
    container_name: rtl2hass
    image: jochocki/rtl2hass
    devices:
      - "/dev/bus/usb/002/003"
    environment:
      - MQTT_HOST=mqtt
  zwavejs2mqtt:
    container_name: zwavejs2mqtt
    image: zwavejs/zwavejs2mqtt
    restart: always
    tty: true
    stop_signal: SIGINT
    networks:
      - default
    ports:
      - 8091:8091
      - 3001:3001
    devices:
      - "/dev/bus/usb/002/003"
    devices:
      - "/dev/serial/by-id/usb-0658_0200-if00:/dev/ttyACM1:rmw"
    volumes:
      - ${USERDIR}/docker/zwavejs2mqtt:/usr/src/app/store
    environment:
      - MQTT_HOST=mqtt
  ettgram:
    image: nginx
    container_name: ettgram    
    restart: always
    hostname: ettgram
    networks:
      - default
      - traefik_proxy
    ports:
      - 8484:80
    volumes: 
      - ${USERDIR}/docker/nginx:/usr/share/nginx/html
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_proxy"
      - "traefik.http.routers.nginx-router.rule=Host(`ett-the-gram.${DOMAINNAME}`)"
      - "traefik.http.routers.nginx-router.tls=true"
      - "traefik.http.routers.nginx-router.tls.certresolver=letsencrypt"
      - "traefik.http.routers.nginx-router.middlewares=secured-no-basic@file"
      - "traefik.http.services.nginx-service.loadbalancer.server.port=80"
      - "traefik.http.services.nginx-service.loadbalancer.server.scheme=http"
      - "traefik.http.services.nginx-service.loadbalancer.passHostHeader=true"
      

  # shinobi:
  #   image: shinobisystems/shinobi:latest-ubuntu
  #   container_name: shinobi
  #   restart: always
  #   hostname: shinobi
  #   ports:
  #     - "8082:8080/tcp"
  #   environment:
  #     - APP_BRANCH=dev
  #   volumes:
  #     - ${USERDIR}/docker/shinobi/streams:/dev/shm/streams
  #     - ${USERDIR}/docker/shinobi/config:/config
  #     - ${USERDIR}/docker/shinobi/customautoload:/customAutoLoad
  #     - ${USERDIR}/docker/shinobi/database:/var/lib/mysql
  #     - ${USERDIR}/docker/shinobi/videos:/opt/shinobi/videos
    
  # zigbee2mqtt:
  #   container_name: zigbee2mqtt
  #   image: koenkk/zigbee2mqtt
  #   restart: always
  #   volumes:
  #     - ${USERDIR}/docker/zigbee2mqtt/data:/app/data
  #     - ${USERDIR}/docker/zigbee2mqtt/run/udev:/run/udev:ro
  #   devices:
  #     - "/dev/serial/by-id/usb-Texas_Instruments_TI_CC2531_USB_CDC___0X00124B0019384464-if00:/dev/ttyACM0"
  #   restart: always
  #   privileged: true
  #   environment:
  #     - TZ=${TZ}

  # influxdb:
  #   image: influxdb:alpine
  #   container_name: influxdb
  #   restart: "no"
  #   ports:
  #     - "8086:8086"
  #     - "8083:8083"
  #   volumes:
  #     - ${USERDIR}/docker/influxdb:/var/lib/influxdb
  #     - ${USERDIR}/docker/influxdb/influxdb.conf:/etc/influxdb/influxdb.conf:ro
  #     - ${USERDIR}/docker/shared:/shared
  #   environment:
  #     INFLUXDB_DB: ${DBNAME}
  #     INFLUXDB_USER: ${DBUSER}
  #     INFLUXDB_USER_PASSWORD: ${DBPASS}
  #     TZ: ${TZ}

  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana
  #   restart: "no"
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - traefik_proxy
  #   environment:
  #     GF_SECURITY_ADMIN_PASSWORD: ${DBPASS}
  #   depends_on:
  #     - influxdb
  #   volumes:
  #     - grafana-storage:/var/lib/grafana
  #     - ${USERDIR}/docker/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
  #     - ${USERDIR}/docker/shared:/shared
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.docker.network=traefik_proxy"
  #     - "traefik.http.routers.grafana-router.rule=Host(`grafana.${DOMAINNAME}`)"
  #     - "traefik.http.routers.grafana-router.tls=true"
  #     - "traefik.http.routers.grafana-router.tls.certresolver=letsencrypt"
  #     - "traefik.http.routers.grafana-router.middlewares=secured@file"
  #     - "traefik.http.services.grafana-service.loadbalancer.server.port=3000"
  #     - "traefik.http.services.grafana-service.loadbalancer.server.scheme=https"
  #     - "traefik.http.services.grafana-service.loadbalancer.passHostHeader=true"

  sonarqube:
    container_name: sonarqube
    image: sonarqube:8.4.1-community
    restart: "no"
    ports:
      - 9002:9000
# volumes:
#   grafana-storage:
networks:
  traefik_proxy:
    external:
      name: traefik_proxy
  default:
    driver: bridge
